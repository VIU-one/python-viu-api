name: Build, Generate Client, and Publish to PyPI

on:
  release:
    types: [published]
    tags:
      - "live-*"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Extract Version from Tag
        run: echo "PACKAGE_VERSION=$(echo ${GITHUB_REF#refs/tags/live-})" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools build twine wheel

      - name: Generate Python client code from proto files
        run: |
          mkdir -p src/python_viu_api
          python -m grpc_tools.protoc -Iproto --python_out=src/python_viu_api --grpc_python_out=src/python_viu_api proto/*.proto
          touch src/python_viu_api/__init__.py  # Ensure the module is importable

      - name: Create README.md for client usage
        run: |
          cat << 'EOF' > README.md
          # Python Client for Viu API

          This package provides the generated Python client code for accessing various text embedding services
          via gRPC. It is built from proto files found in the `proto` directory.

          ## Installation

          Install the package using pip:

          ```bash
          pip install python-viu-api
          ```

          ## Usage

          Import the generated modules in your Python code:

          ```python
          from python_viu_api import jinaembed_pb2, viu_api_pb2, viu_api_pb2_grpc
          import grpc

          # Example: Create a request for Jina embeddings
          request = jinaembed_pb2.JinaEmbedRequest(
              texts=["Sample text"],
              task=jinaembed_pb2.RETRIEVAL_QUERY,
              truncate_dim=128
          )

          # Set up a gRPC channel (adjust the target as needed)
          channel = grpc.insecure_channel('localhost:50051')
          stub = viu_api_pb2_grpc.ApiServiceStub(channel)

          # Call the EmbedJinaEmbeddingsV3 RPC
          response = stub.EmbedJinaEmbeddingsV3(request)
          print(response)
          ```

          ## Supported Models

          - NVEmbedV2
          - BGEGemma2
          - JinaEmbeddingsV3

          EOF

      - name: Build package
        run: python setup.py sdist bdist_wheel  # Make sure setup.py correctly packages generated files

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
