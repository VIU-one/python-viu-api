name: CI for Proto API Client Library

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install proto tools, betterproto, and test framework
          pip install grpcio grpcio-tools "betterproto[compiler]" pytest

      - name: Generate gRPC Client Code
        run: |
          # Create dedicated folders for generated code
          mkdir -p generated/viuapi generated/jinaembed
          python -m grpc_tools.protoc -I proto --python_betterproto_out=generated/viuapi proto/viu-api.proto
          python -m grpc_tools.protoc -I proto --python_betterproto_out=generated/jinaembed proto/jinaembed.proto
          # Ensure packages are recognized
          touch generated/viuapi/__init__.py generated/jinaembed/__init__.py

      - name: Run Tests
        env:
          # If your tests need to import the generated modules, add them to PYTHONPATH
          PYTHONPATH: ${{ github.workspace }}/generated
        run: pytest --maxfail=1 --disable-warnings -q

  publish:
    if: github.event_name == 'release'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python for Publishing
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Build & Publish Tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build twine

      - name: Build Distribution
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
